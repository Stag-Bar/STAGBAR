package edu.nku.CSC440.stagbar.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import edu.nku.CSC440.stagbar.dataaccess.Alcohol;
import edu.nku.CSC440.stagbar.dataaccess.CustomAlcoholType;
import edu.nku.CSC440.stagbar.dataaccess.MixedDrink;
import edu.nku.CSC440.stagbar.dataaccess.MixedDrinkIngredient;
import edu.nku.CSC440.stagbar.service.AlcoholService;
import edu.nku.CSC440.stagbar.service.MixedDrinkService;
import edu.nku.CSC440.stagbar.service.TypeService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class CreateMixedDrinkUI {
	private final Map<Integer, IngredientRowUI> rowUIMap;
	private JButton cancelButton;
	private JPanel contentPane;
	private JLabel errorMessage;
	private JPanel ingredientPane;
	private final ItemListener checkboxListener = e -> onCheck(e);
	private JLabel nameLabel;
	private JTextField nameTextField;
	private JButton okButton;
	private JTabbedPane tabbedPane;

	public CreateMixedDrinkUI() {
		$$$setupUI$$$();
		contentPane.setName("Create Mixed Drink");

		rowUIMap = new HashMap<>();

		populateTabPaneByType();

		okButton.addActionListener(e -> onOk());
		cancelButton.addActionListener(e -> onCancel());
	}

	/** @noinspection ALL */
	public JComponent $$$getRootComponent$$$() { return contentPane; }

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(5, 1, new Insets(10, 10, 10, 10), -1, -1));
		contentPane.setOpaque(true);
		contentPane.setPreferredSize(new Dimension(575, 750));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		okButton = new JButton();
		okButton.setText("OK");
		panel1.add(okButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		cancelButton = new JButton();
		cancelButton.setText("Cancel");
		panel1.add(cancelButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		errorMessage = new JLabel();
		errorMessage.setForeground(new Color(-65536));
		errorMessage.setText("");
		panel2.add(errorMessage, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 16), null, 0, false));
		final JSplitPane splitPane1 = new JSplitPane();
		splitPane1.setDividerLocation(300);
		splitPane1.setOrientation(0);
		contentPane.add(splitPane1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		splitPane1.setLeftComponent(panel3);
		final JPanel panel4 = new JPanel();
		panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		panel3.add(panel4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JScrollPane scrollPane1 = new JScrollPane();
		panel4.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final JPanel panel5 = new JPanel();
		panel5.setLayout(new GridLayoutManager(2, 1, new Insets(5, 5, 5, 5), -1, -1));
		scrollPane1.setViewportView(panel5);
		final JPanel panel6 = new JPanel();
		panel6.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		panel5.add(panel6, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setFont(new Font(label1.getFont().getName(), Font.BOLD, label1.getFont().getSize()));
		label1.setText("Ingredient");
		panel6.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
		final JLabel label2 = new JLabel();
		label2.setFont(new Font(label2.getFont().getName(), Font.BOLD, label2.getFont().getSize()));
		label2.setText("Amount");
		panel6.add(label2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		panel5.add(ingredientPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		tabbedPane = new JTabbedPane();
		splitPane1.setRightComponent(tabbedPane);
		final JPanel panel7 = new JPanel();
		panel7.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel7, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		nameLabel = new JLabel();
		nameLabel.setText("Name:");
		panel7.add(nameLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		nameTextField = new JTextField();
		panel7.add(nameTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		nameLabel.setLabelFor(nameTextField);
	}

	public void addIngredientRow(Alcohol alcohol) {
		IngredientRowUI ingredientRow = new IngredientRowUI(alcohol);
		rowUIMap.put(alcohol.getAlcoholId(), ingredientRow);
		ingredientPane.add(ingredientRow.getContentPane());
	}

	private void createUIComponents() {
		ingredientPane = new JPanel();
		ingredientPane.setLayout(new BoxLayout(ingredientPane, BoxLayout.Y_AXIS));
	}

	public JPanel getContentPane() {
		return contentPane;
	}

	public Set<MixedDrinkIngredient> getIngredients() {
		boolean failure = false;
		Set<MixedDrinkIngredient> ingredients = new HashSet<>();

		for(IngredientRowUI ingredientRow : rowUIMap.values()) {
			try {
				ingredients.add(ingredientRow.getIngredient());
			} catch(IllegalStateException e) {
				failure = true;
			}
		}
		if(failure) {
			ingredients = null;
		}
		return ingredients;
	}

	private void onCancel() {
		uiHacks.killMeThenGoToLastPage(contentPane);
	}

	private void onCheck(ItemEvent event) {
		if(AlcoholCheckBox.class.equals(event.getItemSelectable().getClass())) {
			AlcoholCheckBox alcoholCheckBox = (AlcoholCheckBox)event.getItemSelectable();

			if(event.getStateChange() == ItemEvent.SELECTED) { // Add to scrollPane
				addIngredientRow(alcoholCheckBox.getAlcohol());
			}
			else { // Remove from scrollPane
				removeIngredientRow(alcoholCheckBox.getAlcohol().getAlcoholId());
			}

			getContentPane().revalidate();
		}
	}

	private void onOk() {
		if(validateName()) {
			Set<MixedDrinkIngredient> ingredients = getIngredients();
			if(null != ingredients) { // Save Drink
				MixedDrink newDrink = new MixedDrink(nameTextField.getText(), ingredients);
				MixedDrinkService.getInstance().saveMixedDrink(newDrink);
				okButton.setEnabled(false);
				uiHacks.killMeThenGoToLastPage(contentPane);
			}
			else {
				errorMessage.setText("Alcohol amounts incomplete.");
			}
		}
	}

	private void populateTabPaneByType() {
		for(CustomAlcoholType type : TypeService.getInstance().getAllCustomAlcoholTypes()) {
			TabUI tabUI = new TabUI(checkboxListener);

			for(Alcohol alcohol : AlcoholService.getInstance().getAlcoholByType(type, LocalDate.now())) {
				tabUI.addCheckbox(alcohol);
			}

			tabbedPane.addTab(type.toString(), tabUI.getContentPane());
		}
	}

	public void removeIngredientRow(int alcoholId) {
		IngredientRowUI ingredientRow = rowUIMap.remove(alcoholId);
		ingredientPane.remove(ingredientRow.getContentPane());
	}

	private boolean validateName() {
		boolean valid = true;
		if(nameTextField.getText().isEmpty()) {
			errorMessage.setText("Name field cannot be blank.");
			valid = false;
		}
		else if(!MixedDrinkService.getInstance().isDrinkNameUnique(nameTextField.getText())) {
			errorMessage.setText("A drink of that name already exists.");
			valid = false;
		}
		nameLabel.setForeground(valid ? Color.BLACK : Color.RED);
		return valid;
	}

}
